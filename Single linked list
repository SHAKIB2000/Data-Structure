#include<stdio.h>
#include<stdlib.h>
struct Node
{
    int data;
    struct Node* link;
};
typedef struct Node node;
node *head,*temp,*first=0;
void list_creation(int num)
{
    head=(node*)malloc(sizeof(node));
    head->data=num;
    head->link=0;
    if(first!=0)
    {
        temp->link=head;
        temp=head;
    }
    else
    {
        temp=first=head;
    }
}
int length()
{
    int count=0;
    temp=first;
    while(temp!=0)
    {
        count++;
        temp=temp->link;
    }
    return count;
}
void insertl_begin(int num)
{
    head=(node*)malloc(sizeof(node));
    head->data=num;
    head->link=first;
    first=head;
}
void insertl(int num)
{
    int loc,len,i=1;
    printf("Enter the location to insert : ");
    scanf("%d",&loc);
    len=length();
    if(loc>len)
    {
        printf("Invalid location!\n");
        printf("The Linked list having %d nodes.\n",len);
    }
    else if(loc==1)
    {
        insertl_begin(num);
    }
    else
    {
        temp=first;
        while(i<loc-1)
        {
            temp=temp->link;
            i++;
        }
        head=(node*)malloc(sizeof(node));
        head->data=num;
        head->link=temp->link;
        temp->link=head;
    }
}
int deletel(int loc)
{
    int i=1,len=length(),data;
    node *p;
    if(first==0)
    {
        printf("Already there are no nodes in the list!\n");
        return -1;
    }
    else if(loc>len)
    {
        printf("Invalid location!\n");
        printf("The Linked list having %d nodes.\n",len);
        return -1;
    }
    else if(loc==1)
    {
        temp=first;
        first=temp->link;
        temp->link=0;
        data=temp->data;
        free(temp);
    }
    else
    {
        temp=first;
        while(i!=loc-1)
        {
            temp=temp->link;
            i++;
        }
        p=temp->link;
        temp->link=p->link;
        p->link=0;
        data=p->data;
        free(p);
    }
    return data;
}
void displaylew()
{
    temp=first;
    if(temp==0)
    {
        printf("No nodes here!\n");
    }
    else
    {
        while(temp!=0)
        {
            printf("%d ",temp->data);
            temp=temp->link;
        }
        printf("\n");
    }
}
void displaylnw()
{
    temp=first;
    if(temp==0)
    {
        printf("No nodes here!\n");
    }
    else
    {
        printf("First = [%d]",first);
        while(temp!=0)
        {
            printf("-->[%d][%d]",temp->data,temp->link);
            temp=temp->link;
        }
        printf("\n");
    }
}
int list_search(int data)
{
    int loc=1;
    temp=first;
    while(temp!=0)
    {
        if(temp->data==data)
        {
            return loc;
        }
        temp=temp->link;
        loc++;
    }
    if(temp==0)
    {
        return -1;
    }
}
void reverse_print(node* first) {
   if(first == 0) {
      return;
   }

   reverse_print(first->link);
   printf("%d  ",first->data);

}
int sum()
{
    int sum=0;
   if(first == 0) {
        printf("There is no data in the list\n");
      return sum;
   }
   else{
    temp=first;
    while(temp!=0)
    {
        sum=sum+temp->data;
        temp=temp->link;
    }

   }
   return sum;
}
void main()
{
    int choice,data,n,i,loc;
    while(1)
    {
        printf("-------------------------------------\n");
        printf("\tLinked Operations\n");
        printf("-------------------------------------\n");
        printf("\t1.Linked list creation.\n");
        printf("\t2.Insert element at begin.\n");
        printf("\t3.Insert element after.\n");
        printf("\t4.Delete element.\n");
        printf("\t5.Display element-wise.\n");
        printf("\t6.Display node-wise.\n");
        printf("\t7.Nodes count.\n");
        printf("\t8.Search element.\n");
        printf("\t9.Print reverse.\n");
        printf("\t10.Sum of all data.\n");
        printf("\t0.Exit.\n");
        printf("-------------------------------------\n");
        printf("Enter what do you want : ");
        scanf("%d",&choice);
        switch(choice)
        {
        case 0:
            return;
        case 1:
            printf("How many nodes you want to create : ");
            scanf("%d",&n);
            for(i=1;i<=n;i++)
            {
                printf("Enter Node %d data : ",i);
                scanf("%d",&data);
                list_creation(data);
            }
            break;
        case 2:
            printf("Enter the element : ");
            scanf("%d",&data);
            insertl_begin(data);
            break;
        case 3:
            printf("Enter the element : ");
            scanf("%d",&data);
            insertl(data);
            break;
        case 4:
            printf("Enter the location : ");
            scanf("%d",&data);
            data=deletel(data);
            if(data!=-1)
            printf("%d deleted!\n",data);
            break;
        case 5:
            printf("\nThe status of the linked list\n\n");
            displaylew();
            break;
        case 6:
            printf("\nThe status of the linked list\n\n");
            displaylnw();
            break;
        case 7:
            printf("\nThere are %d nodes in the linked list\n",length());
            break;
        case 8:
            printf("Which item you want to seacrh: ");
            scanf("%d",&data);
            loc=list_search(data);
            if(loc==-1)
            {
                printf("Item not found.\n");
            }
            else
                printf("Item found at Location %d\n",loc);
                break;
        case 9:
                if(first!=0)
                printf("Status of reverse of the linked list is\n");
                reverse_print(first);
            break;
        case 10:
            printf("Sum of all data of the list = %d\n",sum());
            break;
        default:
            printf("Wrong keyword!");
            }
            printf("\n\n\n");
            system("pause");
            system("cls");
        }
}

